(in-package :stumpwm)
(setf *default-package* :stumpwm)


(when *initializing*

 (load-module "sbclfix")
 (load-module "mem")
 (load-module "uptime")
 (load-module "mpd")
 (load-module "links-menu")
 (load-module "net")
 (load-module "notification")
 (load-module "maildir")
 (load-module "cpu")

 (mpd-connect)
 (grename "Main")
 (gnew "Web")
 (gother)
 (banish))
 
(defmacro read-file (filename)
`(read-line (open ,filename)))

(defun load-data ()
 (with-open-file (in "/tmp/data")
  (with-standard-io-syntax
   (setf *data* (read in)))))


(define-keysym #x1008ff16 "RW")
(define-keysym #x1008ff14 "PP")
(define-keysym #x1008ff15 "STOP")
(define-keysym #x1008ff32 "MUSIC")
(define-keysym #x1008ff17 "FF")
(define-keysym #x1008ff11 "VD")
(define-keysym #x1008ff12 "MUTE")
(define-keysym #x1008ff13 "VU")

(set-prefix-key (kbd "C-a"))
(set-fg-color "Gray")
(set-bg-color "Black")
(set-border-color "Gray20")
(set-msg-border-width 10)
(set-focus-color   "gray40")
(set-unfocus-color "black")
(set-normal-gravity :center)
(set-font "-misc-fixed-*-*-*-*-10-*-*-*-*-*-*-*" )
(maildir-set-update-time 60)

(defcommand uzbl-tabbed () ()
 (run-or-raise "uzbl-tabbed goosh.org" '(:class "Uzbl-tabbed")))
(define-frame-preference "Web"
 (0 t   t :class "Uzbl-tabbed"))

(setf
 *maildir-path*                 "/home/bronsa/.mail/target/"
 *float-window-border*          2
 *float-window-title-height*    8
 *escape-fake-key*              (kbd "a")
 *mpd-modeline-fmt*             "%a - %A - %t"
 *terminal*                     "urxvtc"
 *data-dir*                     "~/.stumpwm.d/"
 *mouse-focus-policy*           :click
 *message-window-gravity*       :center
 *timeout-wait*                 3 
 *input-window-gravity*         :center
 *startup-message*              nil 
 *maxsize-border-width*         1
 *colors*                       (append *colors*
     (list "grey10"
      "Gray"))
 *normal-border-width*          1
 *window-border-style*          :thin
 *mode-line-border-color*       "black"
 *mode-line-background-color*   "black"
 *mode-line-foreground-color*   "grey"
 *mode-line-timeout*            1
 *mode-line-highlight-format*    "^09~a^n"
 *mode-line-position*           :bottom
 *frame-number-map*             "1234567890"
 *window-format*                "^n%n^90-^n%m%20t^n")

(setf *screen-mode-line-format* 
 (list
     '(:eval (format nil "" (load-data)))
     "^90[^n"
     "%g^90] [^n%w"
     "^90]^n"
     '(:eval (format nil "~c" #\Newline))
     "^90[^n%d"
     "^90] [^n"
     '(:eval (getf *data* :uname))
     "^90] [^nPlaying: %m" 
     "^90] [^nMails: %M"
     "^90]^n"
     '(:eval (format nil "~c" #\Newline))
     "^90[^nUptime: "
     "%U"
     " ^90|^n "
     "Cpu: %c"
     " - "
     '(:eval (getf *data* :loadavg))
     " ^90|^n "
     "CpuTemp: "
     '(:eval (getf *data* :cputemp))
     "^90|^n "
     "GpuTemp:"
     '(:eval (getf *data* :gputemp))
     " ^90|^n "
     "Mem: %R"
     " ^90|^n"
     " %l"
     "^90]^n %N"))

(update-color-map (current-screen))

(if (not (head-mode-line (current-head)))
 (toggle-mode-line (current-screen) (current-head)))

(define-key *top-map*  (kbd "MUSIC")        *mpd-map*)
(define-key *root-map* (kbd "N")            *notification-map*)
(define-key *root-map* (kbd "L")            "loadrc")
(define-key *root-map* (kbd "C-TAB")        "fnext")
(define-key *root-map* (kbd "ISO_Left_Tab") "fother")
(define-key *root-map* (kbd "RET")          "fullscreen")
(define-key *root-map* (kbd "M")            "move-window")
(define-key *root-map* (kbd "c")            "exec urxvtc")
(define-key *root-map* (kbd ".")            "links-menu")
(define-key *root-map* (kbd "y")            "mark")
(define-key *root-map* (kbd "F")            "gnew-float")
(define-key *top-map*  (kbd "C-1")          "exec urxvtc")
(define-key *top-map*  (kbd "C-2")          "uzbl-tabbed")
(define-key *top-map*  (kbd "RW")           "mpd-prev")
(define-key *top-map*  (kbd "PP")           "mpd-toggle-pause")
(define-key *top-map*  (kbd "STOP")         "mpd-stop")
(define-key *top-map*  (kbd "FF")           "mpd-next")
(define-key *top-map*  (kbd "VD")           "mpd-volume-down")
(define-key *top-map*  (kbd "MUTE")         "exec amixer sset Master toggle")
(define-key *top-map*  (kbd "VU")           "mpd-volume-up")
; vim:set ft=lisp et:

