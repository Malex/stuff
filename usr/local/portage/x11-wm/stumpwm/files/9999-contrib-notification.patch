--- contrib/notification.lisp	2010-08-11 17:18:34.677000004 +0200
+++ contrib/notification.lisp.new	2010-08-11 17:18:26.081000005 +0200
@@ -1,6 +1,6 @@
-;;; notifications.lisp -- Poor man's systray for StumpWM
+;;; notification.lisp -- Poor man's systray for StumpWM
 
-;; Copyright 2008 Tassilo Horn <tassilo@member.fsf.org>
+;; Copyright 2008 Tassilo Horn <tassilo@member.fsf.org> edited by Bronsa
 ;;
 ;; Maintainer: 
 ;;
@@ -25,22 +25,22 @@
 ;;
 ;; To use it add this to your ~/.stumpwmrc.lisp:
 ;;
-;;   (load "/path/to/stumpwm/contrib/notifications.lisp")
+;;   (load "/path/to/stumpwm/contrib/notification.lisp")
 ;;
 ;; Then add the formatter %N to your mode-line spec, i.e. like this:
 ;;
 ;;   (setf *screen-mode-line-format* "[%W] {%g} (%N)")
 ;;
-;; You might want to bind *notifications-map* to a key:
+;; You might want to bind *notification-map* to a key:
 ;;
-;;   (define-key *root-map* (kbd "N") '*notifications-map*)
+;;   (define-key *root-map* (kbd "N") '*notification-map*)
 ;;
-;; With this map you can add notifications with a, reset them with r, delete
+;; With this map you can add notification with a, reset them with r, delete
 ;; the first/last with d/D or show them in a popup with s.
 ;;
 ;; External applications can add notification messages using stumpish:
 ;;
-;;   $ stumpish notifications-add 'Foo Bar Baz'
+;;   $ stumpish notification-add 'Foo Bar Baz'
 ;;
 ;; For example this is the elisp code that I use to let rcirc (an Emacs IRC
 ;; client) notify me when a message with my nickname or a IM message arrives:
@@ -54,78 +54,57 @@
 ;;                 (string-match "localhost" (format "%s" process))
 ;;                 ;; Messages that mention my name
 ;;                 (string-match my-nick text)))
-;;       (th-notifications-add (concat "rcirc: " target)))))
+;;       (th-notification-add (concat "rcirc: " target)))))
 ;;
 ;; (add-hook 'rcirc-print-hooks 'th-rcirc-notification)
 ;;
-;; (defun th-notifications-add (str)
+;; (defun th-notification-add (str)
 ;;   (interactive "sNotification: ")
-;;   (start-process "notifications-add" nil
-;;                  "stumpish" "notifications-add" str))
+;;   (start-process "notification-add" nil
+;;                  "stumpish" "notification-add" str))
 ;;
 
 ;;; Code:
 
 (in-package :stumpwm)
 
-(pushnew '(#\N notifications-as-string) *screen-mode-line-formatters* :test 'equal)
+(pushnew '(#\N notification-as-string) *screen-mode-line-formatters* :test 'equal)
 
-(defparameter *notifications-delimiters* '("[" "]"))
+(defparameter *notification-delimiters* '("[" "]"))
 
-(defvar notifications nil
-  "A list of notification strings.")
+(defvar notification nil
+  "The notification string.")
 
-(defcommand notifications-add (str)
+(defcommand notification-add (str)
   ((:rest "Notification: "))
   "Add a notification string.
-If a notification is already included, it will be moved to the front instead of
-added anew."
-  (when (not (string= (car notifications) str))
-    (when (member str notifications :test #'string=)
-      (setf notifications (delete str notifications :test #'string=)))
-    (push str notifications)))
+If a notification is already included, it will be replaced" 
+    (setf notification str))
 
-(defcommand notifications-reset ()
+(defcommand notification-reset ()
   ()
-  "Clear all notifications."
-  (setf notifications nil))
+  "Clear the notification."
+  (setf notification nil))
 
-(defcommand notifications-delete (str)
-  ()
-  "Delete the specified notification."
-  (setf notifications (delete str notifications :test #'string=)))
-
-(defcommand notifications-delete-first ()
-  ()
-  "Delete the first notification."
-  (setf notifications (cdr notifications)))
-
-(defcommand notifications-delete-last ()
-  ()
-  "Delete the first notification."
-  (setf notifications (nreverse (cdr (nreverse notifications)))))
-
-(defun notifications-as-string (&rest r)
+(defun notification-as-string (&rest r)
   (declare (ignore r))
-  (if notifications
-      (format nil "~a ~{ ~a ~#[~:;;~]~} ~a"
-              (first *notifications-delimiters*)
-              notifications
-              (second *notifications-delimiters*))
+  (if notification
+      (format nil "~a ~a ~a"
+              (first *notification-delimiters*)
+              notification
+              (second *notification-delimiters*))
     ""))
 
-(defcommand notifications-show ()
+(defcommand notification-show ()
   ()
-  "Messages all notifications."
-  (message "Notifications: ~a" (notifications-as-string)))
+  "Messages notification."
+  (message "Notification: ~a" (notification-as-string)))
 
-(defvar *notifications-map*
+(defvar *notification-map*
   (let ((m (make-sparse-keymap)))
-    (define-key m (kbd "a")     "notifications-add")
-    (define-key m (kbd "r")     "notifications-reset")
-    (define-key m (kbd "d")     "notifications-delete-first")
-    (define-key m (kbd "D")     "notifications-delete-last")
-    (define-key m (kbd "s")     "notifications-show")
+    (define-key m (kbd "a")     "notification-add")
+    (define-key m (kbd "r")     "notification-reset")
+    (define-key m (kbd "s")     "notification-show")
     m))
 
 ;; Local Variables:
