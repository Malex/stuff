--- grub.py	2010-04-08 02:07:21.000000000 +0200
+++ grub.py.new	2010-05-08 20:09:12.979898898 +0200
@@ -21,6 +21,7 @@
 		self.fn = "%s/grub/grub.cfg" % self.config["boot/path"]
 		self.bootitems = []
 		self.GuppyMap()
+		self.mytype = ""
 
 	def isAvailable(self):
 		msgs=[]
@@ -43,10 +44,13 @@
 			mytype = "vista"
 		elif mytype in [ "windows 7", "win7" ]:
 			mytype = "win7"
+		elif mytype in [ "haiku", "haiku os", "be os", "beos" ]:
+			mytype = "beos"
 		else:
 			ok = False
 			msgs.append(["fatal","Unrecognized boot entry type \"%s\"" % mytype])
 			return [ ok, msgs ]
+		self.mytype = mytype
 		params=self.config["%s/params" % sect].split()
 		myroot = r.GetParam(params,"root=")
 		myname = sect
@@ -58,7 +62,7 @@
 		retval, mygrubroot = self.DeviceGRUB(myroot)
 		if mytype == "win7":
 			l.append("	chainloader +4")
-		elif mytype in [ "vista", "dos", "winxp" ]:
+		elif mytype in [ "vista", "dos", "winxp", "beos" ]:
 			l.append("	chainloader +1")
 		l.append("}")
 		return [ ok, msgs ]
@@ -215,10 +219,12 @@
 
 	def PrepareGRUBForDevice(self,dev,l):
 		for mod in self.RequiredGRUBModules(dev):
-			l.append("	insmod %s" % mod)
+			if self.mytype != "beos":
+				l.append("	insmod %s" % mod)
 		retval, grubdev = self.DeviceGRUB(dev)
 		l.append("	set root=%s" % grubdev)
-		retval, uuid = self.DeviceUUID(dev)
-		if retval == 0:
-			l.append("	search --no-floppy --fs-uuid --set %s" % uuid )
+		if self.mytype != "beos":
+			retval, uuid = self.DeviceUUID(dev)
+			if retval == 0:
+					l.append("	search --no-floppy --fs-uuid --set %s" % uuid )
 		# TODO: add error handling for retvals	
